package ru.nabokovsg.company.service;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import ru.nabokovsg.company.dto.exploitationRegion.NewExploitationRegionDto;
import ru.nabokovsg.company.dto.exploitationRegion.ResponseExploitationRegionDto;
import ru.nabokovsg.company.dto.exploitationRegion.ResponseShortExploitationRegionDto;
import ru.nabokovsg.company.dto.exploitationRegion.UpdateExploitationRegionDto;
import ru.nabokovsg.company.exceptions.BadRequestException;
import ru.nabokovsg.company.exceptions.NotFoundException;
import ru.nabokovsg.company.mapper.ExploitationRegionMapper;
import ru.nabokovsg.company.model.ExploitationRegion;
import ru.nabokovsg.company.repository.ExploitationRegionRepository;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ExploitationRegionServiceImpl implements ExploitationRegionService {

    private final ExploitationRegionRepository repository;
    private final ExploitationRegionMapper mapper;
    private final BranchService branchService;

    @Override
    public ResponseShortExploitationRegionDto save(NewExploitationRegionDto regionDto) {
        if (repository.existsByFullName(addNumber(regionDto.getFullName(), regionDto.getNumber()))) {
            throw new BadRequestException(
                    String.format("ExploitationRegion with full name=%s and number=%s is found"
                            , regionDto.getFullName(), regionDto.getNumber())
            );
        }
        return mapper.mapToShortExploitationRegionDto(
                repository.save(
                 mapper.mapToExploitationRegion(addNumber(regionDto.getFullName(), regionDto.getNumber())
                                              , addNumber(regionDto.getShortName().toUpperCase(), regionDto.getNumber())
                                              , branchService.getById(regionDto.getBranchId()))));
    }

    @Override
    public ResponseShortExploitationRegionDto update(UpdateExploitationRegionDto regionDto) {
        if (repository.existsById(regionDto.getId())) {
            return mapper.mapToShortExploitationRegionDto(
                    repository.save(
                            mapper.mapToUpdateExploitationRegion(
                                      regionDto.getId()
                                    , addNumber(regionDto.getFullName(), regionDto.getNumber())
                                    , addNumber(regionDto.getShortName().toUpperCase(), regionDto.getNumber()))));
        }
        throw new NotFoundException(
                String.format("ExploitationRegion with name=%s not found for update.", regionDto.getShortName()));
    }

    @Override
    public ResponseExploitationRegionDto get(Long id) {
        return mapper.mapToFullExploitationRegionDto(getById(id));
    }

    @Override
    public ExploitationRegion getById(Long id) {
        return repository.findById(id)
                .orElseThrow(() -> new NotFoundException(
                        String.format("ExploitationRegion with id=%s not found.", id)));
    }

    @Override
    public List<ResponseShortExploitationRegionDto> getAll(Long branchId, String name) {
        Set<ExploitationRegion> exploitationRegions;
        if (branchId != null && branchId > 0) {
            exploitationRegions = repository.findByBranchId(branchId);
        } else {
            exploitationRegions = new HashSet<>(repository.findAll());
        }
        if (name != null) {
            String fullName = name.toLowerCase();
            exploitationRegions = exploitationRegions.stream()
                                                     .filter(v -> v.getFullName().toLowerCase().contains(fullName))
                                                     .collect(Collectors.toSet());
        }
        return exploitationRegions.stream()
                                  .map(mapper::mapToShortExploitationRegionDto)
                                  .toList();
    }

    @Override
    public void delete(Long id) {
        if (repository.existsById(id)) {
            repository.deleteById(id);
            return;
        }
        throw new NotFoundException(String.format("ExploitationRegion with id=%s not found for delete.", id));
    }

    private String addNumber(String name, int number) {
        return String.join(" â„– ", name, String.valueOf(number));
    }
}