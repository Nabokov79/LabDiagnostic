package ru.nabokovsg.company.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import lombok.RequiredArgsConstructor;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import ru.nabokovsg.company.dto.exploitationRegion.NewExploitationRegionDto;
import ru.nabokovsg.company.dto.exploitationRegion.ResponseExploitationRegionDto;
import ru.nabokovsg.company.dto.exploitationRegion.ResponseShortExploitationRegionDto;
import ru.nabokovsg.company.dto.exploitationRegion.UpdateExploitationRegionDto;
import ru.nabokovsg.company.service.ExploitationRegionService;

import java.util.List;

@RestController
@RequestMapping(
        value = "/WorkVisionWeb/company/exploitation",
        consumes = MediaType.ALL_VALUE,
        produces = MediaType.APPLICATION_JSON_VALUE)
@RequiredArgsConstructor
@Validated
@Tag(name = "Эксплуатационный участок",
        description = "API для работы с данными эксплуатационного участка")
public class ExploitationRegionController {

    private final ExploitationRegionService service;

    @Operation(summary = "Добавление данных эксплуатационного участка")
    @PostMapping
    public ResponseEntity<ResponseShortExploitationRegionDto> save(@RequestBody @Valid
                              @Parameter(description = "Эксплуатационный участок") NewExploitationRegionDto regionDto) {
        return ResponseEntity.ok().body(service.save(regionDto));
    }

    @Operation(summary = "Изменение данных эксплуатационного участка")
    @PatchMapping
    public ResponseEntity<ResponseShortExploitationRegionDto> update(@RequestBody @Valid
                           @Parameter(description = "Эксплуатационный участок") UpdateExploitationRegionDto regionDto) {
        return ResponseEntity.ok().body(service.update(regionDto));
    }

    @Operation(summary = "Получение данных эксплуатационного участка")
    @GetMapping("/{id}")
    public ResponseEntity<ResponseExploitationRegionDto> get(@PathVariable @NotNull @Positive
                                                                   @Parameter(description = "Идентификатор") Long id) {
        return ResponseEntity.ok().body(service.get(id));
    }

    @Operation(summary = "Получение кратких сведений о всех эксплуатационных участках")
    @GetMapping
    public ResponseEntity<List<ResponseShortExploitationRegionDto>> getAll(
                                                         @RequestParam(name = "id", required = false)
                                                         @Parameter(description = "Идентификатор филиала") Long branchId,
                                                         @RequestParam(name = "name", required = false)
                                                         @Parameter(description = "Наименование эксплуатационного участка") String name) {
        return ResponseEntity.ok().body(service.getAll(branchId, name));
    }

    @Operation(summary = "Удаление данных эксплуатационного участка")
    @DeleteMapping("/{id}")
    public ResponseEntity<String> delete(@PathVariable @NotNull @Positive
                                         @Parameter(description = "Идентификатор") Long id) {
        service.delete(id);
        return ResponseEntity.ok("Данные эксплуатационного участка успешно удалены.");
    }
}